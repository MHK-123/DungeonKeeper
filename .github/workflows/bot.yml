name: DungeonKeeper Bot 24/7

on:
  workflow_dispatch:
  push:
    paths:
      - 'main.py'
      - 'pyproject.toml'
      - '.github/workflows/bot.yml'
    branches:
      - main
  schedule:
    - cron: "0 */6 * * *"
    - cron: "45 5,11,17,23 * * *"

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 345
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create data directory
        run: mkdir -p data
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            pip install discord.py python-dotenv
          else
            pip install discord.py python-dotenv
          fi

      - name: Validate environment variables
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          STAFF_CHANNEL_ID: ${{ secrets.STAFF_CHANNEL_ID }}
        run: |
          if [ -z "$DISCORD_TOKEN" ]; then
            echo "DISCORD_TOKEN secret is not set"
            exit 1
          fi
          if [ -z "$STAFF_CHANNEL_ID" ]; then
            echo "STAFF_CHANNEL_ID not set, using default"
          fi
          echo "Environment variables validated"

      - name: Run Discord Bot with Auto-Restart
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          STAFF_CHANNEL_ID: ${{ secrets.STAFF_CHANNEL_ID }}
        run: |
          echo "Starting DungeonKeeper for 24/7 operation..."
          echo "Bot will run for 5h 45m before automatic restart"
          echo "Starting at: $(date)"
          
          cleanup() {
            echo "Gracefully shutting down bot at: $(date)"
            kill $BOT_PID 2>/dev/null || true
            exit 0
          }
          trap cleanup SIGTERM SIGINT
          
          while true; do
            echo "Starting/Restarting bot at: $(date)"
            python main.py &
            BOT_PID=$!
            
            wait $BOT_PID
            EXIT_CODE=$?
            
            if [ $EXIT_CODE -eq 0 ]; then
              echo "Bot exited normally"
              break
            else
              echo "Bot crashed with code $EXIT_CODE, restarting in 10 seconds..."
              sleep 10
            fi
          done
